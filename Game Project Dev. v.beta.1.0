import pygame
import sys
import imageio
import os

#ENVIROMENT

import pygame
import sys
import os

#Inicialização do Pygame
pygame.init()

#Definição de constantes
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
FPS = 120

#NPC_BASIC_MOVES
#NPC_BASIC_CLASSES
#Classe para o personagem
class Player(pygame.sprite.Sprite):
    def __init__(self, x, y):
        super().__init__()
        self.image = pygame.Surface((50, 50))  # Inicialização com uma superfície preenchida
        self.image.fill(WHITE)
        self.rect = self.image.get_rect()
        self.rect.center = (x, y)
        self.hitbox = self.rect.copy()  # A hit box inicialmente é igual ao retângulo do personagem
        self.speed = 5
        self.jump_height = -10
        self.is_jumping = False

    def update(self, platforms):
        self.rect.x += self.speed
        self.check_collision(platforms)
        self.rect.y += self.vel_y

    def check_collision(self, platforms):
        collisions = pygame.sprite.spritecollide(self, platforms, False)
        if collisions:
            self.rect.left = collisions[0].rect.right

#Classe para a plataforma
class Platform(pygame.sprite.Sprite):
    def __init__(self, x, y, width, height):
        super().__init__()
        self.image = pygame.Surface((width, height))
        self.image.fill(WHITE)
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y


#Função para carregar uma imagem
def load_image(filename):
    # Concatena o caminho do diretório 'C:/Users/User/Documento/Documentos UTA-ISERMAR/Visual Studio Code-Projects/sprites' com o nome do arquivo
    filepath = os.path.join('C:/Users/User/Documento/Documentos UTA-ISERMAR/Visual Studio Code-Projects/sprites', filename)
    print(filepath)  # Adiciona esta linha para imprimir o caminho absoluto
    # Carrega a imagem e a converte para o formato otimizado do pygame
    return pygame.image.load(filepath).convert_alpha()

#Desenha o sprite do jogador na tela
    screen.blit(player_sprite, (100, 100))

#Image_Directory
import imageio
import os
import pygame

def export_to_gif():
    # Diretório onde as imagens estão localizadas
    image_directory = 'frames'

    # Lista os arquivos de imagem no diretório
    images = [os.path.join(image_directory, f) for f in os.listdir(image_directory) if f.endswith('.png')]

    # Ordena os arquivos por número
    images.sort(key=lambda x: int(os.path.splitext(os.path.basename(x))[0]))

    # Salva as imagens como um arquivo GIF
    output_file = 'animation.gif'
    with imageio.get_writer(output_file, mode='I', duration=0.1) as writer:
        for filename in images:
            image = imageio.imread(filename)
            writer.append_data(image)

    print(f'Arquivo GIF salvo como {output_file}')

#Configuração da janela do jogo
screen_width = 800
screen_height = 600
screen = pygame.display.set_mode((screen_width, screen_height))
pygame.display.set_caption("Meu Jogo")

#load_sprite_phase
#Carrega o sprite do jogador
player_sprite = load_image('player.png')

#Loop principal do jogo
running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
    
    #Limpa a tela
    screen.fill((255, 255, 255))
    
    #Desenha o sprite do jogador na tela
    screen.blit(player_sprite, (100, 100))
    
    #Atualiza a tela
    pygame.display.flip()

#Verificar se esta em um ambiente gráfico
if os.environ.get('DISPLAY'):
    export_to_gif()
else:
    print("Não foi possivel exportar o GIF para o ambiente sem interface gráfica.")

#...(ISN'T_COMPLETE_YET)
